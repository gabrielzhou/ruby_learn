<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>/usr/share/vim/vim81/doc/if_ruby.txt.html</title>
<meta name="Generator" content="Vim/8.1">
<meta name="plugin-version" content="vim7.4_v2">
<meta name="syntax" content="help">
<meta name="settings" content="use_css,pre_wrap,no_foldcolumn,prevent_copy=">
<meta name="colorscheme" content="none">
<style type="text/css">
<!--
pre { white-space: pre-wrap; font-family: monospace; color: #ffffff; background-color: #000000; }
body { font-family: monospace; color: #ffffff; background-color: #000000; }
* { font-size: 1em; }
.Todo { color: #000000; background-color: #ffff00; padding-bottom: 1px; }
.Constant { color: #ff40ff; }
.Special { color: #ffd7d7; }
.Identifier { color: #00ffff; font-weight: bold; }
.PreProc { color: #5fd7ff; }
.Type { color: #87ffaf; }
.Comment { color: #00ffff; }
-->
</style>

<script type='text/javascript'>
<!--

-->
</script>
</head>
<body>
<pre id='vimCodeElement'>
<span class="Constant">if_ruby.txt</span>   For <span class="Identifier">Vim version 8.1.</span>  Last change: 2018 Mar 15


		  <span class="Identifier">VIM REFERENCE MANUAL    by Shugo Maeda</span>

The Ruby Interface to Vim				<span class="Constant">ruby</span> <span class="Constant">Ruby</span>


1. Commands			<span class="Identifier">ruby-commands</span>
2. The Vim module		<span class="Identifier">ruby-vim</span>
3. Vim&#0058;:Buffer objects		<span class="Identifier">ruby-buffer</span>
4. Vim&#0058;:Window objects		<span class="Identifier">ruby-window</span>
5. Global variables		<span class="Identifier">ruby-globals</span>
6. Dynamic loading		<span class="Identifier">ruby-dynamic</span>

<span class="Special">{Vi does not have any of these commands}</span>
			<span class="Constant">E266</span> <span class="Constant">E267</span> <span class="Constant">E268</span> <span class="Constant">E269</span> <span class="Constant">E270</span> <span class="Constant">E271</span> <span class="Constant">E272</span> <span class="Constant">E273</span>

The Ruby interface only works when Vim was compiled with the <span class="Identifier">+ruby</span> feature.

The home page for ruby is <span class="Constant"><a href="http://www.ruby-lang.org/">http://www.ruby-lang.org/</a></span>.  You can find links for
downloading Ruby there.

<span class="PreProc">==============================================================================</span>
1. Commands						<span class="Constant">ruby-commands</span>

							<span class="Constant">:ruby</span> <span class="Constant">:rub</span>
:rub[y] <span class="Special">{cmd}</span>		Execute Ruby command <span class="Special">{cmd}</span>.  A command to try it out:
<span class="Comment">				:ruby print &quot;Hello&quot;</span>

:rub[y] &lt;&lt; <span class="Special">{endpattern}</span>
<span class="Special">{script}</span>
<span class="Special">{endpattern}</span>
			Execute Ruby script <span class="Special">{script}</span>.
			<span class="Special">{endpattern}</span> must NOT be preceded by any white space.
			If <span class="Special">{endpattern}</span> is omitted, it defaults to a dot '.'
			like for the <span class="Identifier">:append</span> and <span class="Identifier">:insert</span> commands.  This
			form of the <span class="Identifier">:ruby</span> command is mainly useful for
			including ruby code in vim scripts.
			<span class="Todo">Note:</span> This command doesn't work when the Ruby feature
			wasn't compiled in.  To avoid errors, see
			<span class="Identifier">script-here</span>.

Example Vim script:

<span class="Comment">	function! RedGem()</span>
<span class="Comment">	ruby &lt;&lt; EOF</span>
<span class="Comment">	class Garnet</span>
<span class="Comment">		def initialize(s)</span>
<span class="Comment">			@buffer = Vim&#0058;:Buffer.current</span>
<span class="Comment">			vimputs(s)</span>
<span class="Comment">		end</span>
<span class="Comment">		def vimputs(s)</span>
<span class="Comment">			@buffer.append(@buffer.count,s)</span>
<span class="Comment">		end</span>
<span class="Comment">	end</span>
<span class="Comment">	gem = Garnet.new(&quot;pretty&quot;)</span>
<span class="Comment">	EOF</span>
<span class="Comment">	endfunction</span>

To see what version of Ruby you have:
<span class="Comment">	:ruby print RUBY_VERSION</span>


						<span class="Constant">:rubydo</span> <span class="Constant">:rubyd</span> <span class="Constant">E265</span>
:<span class="Special">[range]</span>rubyd[o] <span class="Special">{cmd}</span>	Evaluate Ruby command <span class="Special">{cmd}</span> for each line in the
			<span class="Special">[range]</span>, with $_ being set to the text of each line in
			turn, without a trailing <span class="Special">&lt;EOL&gt;</span>.  Setting $_ will change
			the text, but <span class="Todo">note</span> that it is not possible to add or
			delete lines using this command.
			The default for <span class="Special">[range]</span> is the whole file: &quot;1,$&quot;.

							<span class="Constant">:rubyfile</span> <span class="Constant">:rubyf</span>
:rubyf[ile] <span class="Special">{file}</span>	Execute the Ruby script in <span class="Special">{file}</span>.  This is the same as
			<span class="Comment">:ruby load 'file'</span>, but allows file name completion.

Executing Ruby commands is not possible in the <span class="Identifier">sandbox</span>.

<span class="PreProc">==============================================================================</span>
2. The Vim module					<span class="Constant">ruby-vim</span>

Ruby code gets all of its access to vim via the &quot;Vim&quot; module.

Overview:
<span class="Comment">	print &quot;Hello&quot;			      # displays a message</span>
<span class="Comment">	Vim.command(cmd)		      # execute an Ex command</span>
<span class="Comment">	num = Vim&#0058;:Window.count		      # gets the number of windows</span>
<span class="Comment">	w = Vim&#0058;:Window[n]		      # gets window &quot;n&quot;</span>
<span class="Comment">	cw = Vim&#0058;:Window.current	      # gets the current window</span>
<span class="Comment">	num = Vim&#0058;:Buffer.count		      # gets the number of buffers</span>
<span class="Comment">	b = Vim&#0058;:Buffer[n]		      # gets buffer &quot;n&quot;</span>
<span class="Comment">	cb = Vim&#0058;:Buffer.current	      # gets the current buffer</span>
<span class="Comment">	w.height = lines		      # sets the window height</span>
<span class="Comment">	w.cursor = [row, col]		      # sets the window cursor position</span>
<span class="Comment">	pos = w.cursor			      # gets an array [row, col]</span>
<span class="Comment">	name = b.name			      # gets the buffer file name</span>
<span class="Comment">	line = b[n]			      # gets a line from the buffer</span>
<span class="Comment">	num = b.count			      # gets the number of lines</span>
<span class="Comment">	b[n] = str			      # sets a line in the buffer</span>
<span class="Comment">	b.delete(n)			      # deletes a line</span>
<span class="Comment">	b.append(n, str)		      # appends a line after n</span>
<span class="Comment">	line = Vim&#0058;:Buffer.current.line       # gets the current line</span>
<span class="Comment">	num = Vim&#0058;:Buffer.current.line_number # gets the current line number</span>
<span class="Comment">	Vim&#0058;:Buffer.current.line = &quot;test&quot;     # sets the current line number</span>


Module Functions:

							<span class="Constant">ruby-message</span>
Vim&#0058;:message(<span class="Special">{msg}</span>)
	Displays the message <span class="Special">{msg}</span>.

							<span class="Constant">ruby-set_option</span>
Vim&#0058;:set_option(<span class="Special">{arg}</span>)
	Sets a vim option.  <span class="Special">{arg}</span> can be any argument that the &quot;:set&quot; command
	accepts.  <span class="Todo">Note</span> that this means that no spaces are allowed in the
	argument!  See <span class="Identifier">:set</span>.

							<span class="Constant">ruby-command</span>
Vim&#0058;:command(<span class="Special">{cmd}</span>)
	Executes Ex command <span class="Special">{cmd}</span>.

							<span class="Constant">ruby-evaluate</span>
Vim&#0058;:evaluate(<span class="Special">{expr}</span>)
	Evaluates <span class="Special">{expr}</span> using the vim internal expression evaluator (see
	<span class="Identifier">expression</span>).  Returns the expression result as:
	- a Integer if the Vim expression evaluates to a number
	- a Float if the Vim expression evaluates to a float
	- a String if the Vim expression evaluates to a string
	- a Array if the Vim expression evaluates to a Vim list
	- a Hash if the Vim expression evaluates to a Vim dictionary
	Dictionaries and lists are recursively expanded.

<span class="PreProc">==============================================================================</span>
3. Vim&#0058;:Buffer objects					<span class="Constant">ruby-buffer</span>

Vim&#0058;:Buffer objects represent vim buffers.

Class Methods:

current		Returns the current buffer object.
count		Returns the number of buffers.
self[<span class="Special">{n}</span>]	Returns the buffer object for the number <span class="Special">{n}</span>.  The first number
		is 0.

Methods:

name		Returns the name of the buffer.
number		Returns the number of the buffer.
count		Returns the number of lines.
length		Returns the number of lines.
self[<span class="Special">{n}</span>]	Returns a line from the buffer. <span class="Special">{n}</span> is the line number.
self[<span class="Special">{n}</span>] = <span class="Special">{str}</span>
		Sets a line in the buffer. <span class="Special">{n}</span> is the line number.
delete(<span class="Special">{n}</span>)	Deletes a line from the buffer. <span class="Special">{n}</span> is the line number.
append(<span class="Special">{n}</span>, <span class="Special">{str}</span>)
		Appends a line after the line <span class="Special">{n}</span>.
line		Returns the current line of the buffer if the buffer is
		active.
line = <span class="Special">{str}</span>    Sets the current line of the buffer if the buffer is active.
line_number     Returns the number of the current line if the buffer is
		active.

<span class="PreProc">==============================================================================</span>
4. Vim&#0058;:Window objects					<span class="Constant">ruby-window</span>

Vim&#0058;:Window objects represent vim windows.

Class Methods:

current		Returns the current window object.
count		Returns the number of windows.
self[<span class="Special">{n}</span>]	Returns the window object for the number <span class="Special">{n}</span>.  The first number
		is 0.

Methods:

buffer		Returns the buffer displayed in the window.
height		Returns the height of the window.
height = <span class="Special">{n}</span>	Sets the window height to <span class="Special">{n}</span>.
width		Returns the width of the window.
width = <span class="Special">{n}</span>	Sets the window width to <span class="Special">{n}</span>.
cursor		Returns a [row, col] array for the cursor position.
cursor = [<span class="Special">{row}</span>, <span class="Special">{col}</span>]
		Sets the cursor position to <span class="Special">{row}</span> and <span class="Special">{col}</span>.

<span class="PreProc">==============================================================================</span>
5. Global variables					<span class="Constant">ruby-globals</span>

There are two global variables.

$curwin		The current window object.
$curbuf		The current buffer object.

<span class="PreProc">==============================================================================</span>
6. Dynamic loading					<span class="Constant">ruby-dynamic</span>

On MS-Windows and Unix the Ruby library can be loaded dynamically.  The
<span class="Identifier">:version</span> output then includes <span class="Identifier">+ruby/dyn</span>.

This means that Vim will search for the Ruby DLL file or shared library only
when needed.  When you don't use the Ruby interface you don't need it, thus
you can use Vim even though this library file is not on your system.


<span class="PreProc">MS-Windows</span>

You need to install the right version of Ruby for this to work.  You can find
the package to download from:
<span class="Constant"><a href="http://rubyinstaller.org/downloads/">http://rubyinstaller.org/downloads/</a></span>
Currently that is rubyinstaller-2.2.5.exe

To use the Ruby interface the Ruby DLL must be in your search path.  In a
console window type &quot;path&quot; to see what directories are used.  The <span class="Type">'rubydll'</span>
option can be also used to specify the Ruby DLL.

The name of the DLL must match the Ruby version Vim was compiled with.
Currently the name is &quot;msvcrt-ruby220.dll&quot;.  That is for Ruby 2.2.X.  To know
for sure edit &quot;gvim.exe&quot; and search for &quot;ruby\d*.dll\c&quot;.

If you want to build Vim with RubyInstaller 1.9 or 2.X using MSVC, you need
some tricks.  See the src/INSTALLpc.txt for detail.

If Vim is built with RubyInstaller 2.4 or later, you may also need to add
&quot;C:\Ruby<span class="Special">&lt;version&gt;</span>\bin\ruby_builtin_dlls&quot; to the PATH environment variable.


<span class="PreProc">Unix</span>

The <span class="Type">'rubydll'</span> option can be used to specify the Ruby shared library file
instead of DYNAMIC_RUBY_DLL file what was specified at compile time.  The
version of the shared library must match the Ruby version Vim was compiled
with.

<span class="PreProc">==============================================================================</span>
 vim&#0058;tw=78:ts=8:ft=help:norl:
</pre>
</body>
</html>
<!-- vim: set foldmethod=manual : -->
